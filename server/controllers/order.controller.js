const Telegraf = require('telegraf')
const Restaurant = require('../models/restaurant.model')
const helpers = require('../helpers')
const moment = require('moment')
const keys = require('../config')

module.exports.order = async (req, res) => {
	const order = JSON.parse(req.body.order)
	const dayAlias = moment().format('dddd').toLowerCase()

	if (!order.basket.length) {
		helpers.clientErrorHandler(res, 400, '–ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å —É –í–∞—Å –ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑')
	}

	const bot = new Telegraf(keys.TELEGRAM_BOT_TOKEN, {
		// telegram: {
		//   agent: new HttpsProxyAgent(
		//     `http://${keys.PROXY_USER}:${keys.PROXY_PASSWORD}@${keys.PROXY_URL}:${keys.PROXY_PORT}`
		//   ),
		// },
	})

	let noError = true

	try {
		const restaurant = await Restaurant.findById(order.restaurant)

		const day = restaurant.schedule.filter(day => day.alias === dayAlias)
		const open = +`${day[0].from.split(':')[0]}.${day[0].from.split(':')[1]}`
		const close = +`${day[0].to.split(':')[0]}.${day[0].to.split(':')[1]}`
		const timeForStopDelivery = +`${restaurant.timeForStopDelivery.split(':')[0]}.${
			restaurant.timeForStopDelivery.split(':')[1]
		}`
		const now = +`${moment().format('HH.mm')}`

		if (now < open || now >= close || !day[0].isWorkingDay) {
			noError = false
			helpers.clientErrorHandler(res, 400, `–†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç.`)
		}
		if (order.order.service) {
			if (now >= timeForStopDelivery) {
				noError = false
				helpers.clientErrorHandler(res, 400, `–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è.`)
			}
			if (order.price < restaurant.amountForFreeDelivery) {
				noError = false
				helpers.clientErrorHandler(res, 400, `–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç ${restaurant.amountForFreeDelivery} —Ä—É–±–ª–µ–π`)
			}
			if (!order.order.name || !order.order.phone || !order.order.payment || !order.order.address) {
				noError = false
				helpers.clientErrorHandler(
					res,
					400,
					'–ü–æ–ª—è –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–ø–ª–∞—Ç–∞ –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.'
				)
			}
		}
		if (!order.order.service) {
			if (!order.order.name || !order.order.phone) {
				noError = false
				helpers.clientErrorHandler(res, 400, '–ü–æ–ª—è –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.')
			}
		}
		if (order.order.phone.replace(/[^\d]/g, '').length < 11) {
			noError = false
			helpers.clientErrorHandler(res, 400, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
		}

		if (noError) {
			const orderNumberTime = `${new Date().getHours()}${new Date().getMinutes()}-${new Date().getMilliseconds()}`
			const orderNumber = order.order.service
				? `*–ó–∞–∫–∞–∑-–¥–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ${orderNumberTime}*\n`
				: `*–ó–∞–∫–∞–∑-–Ω–∞–≤—ã–Ω–æ—Å ‚Ññ${orderNumberTime}*\n`
			const client = `*–ò–º—è:* ${order.order.name}\n`
			const phone = `*–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.order.phone}\n\n`
			const address = `üè° *–ê–¥—Ä–µ—Å:* ${order.order.address}\n\n`
			const payment = `üí≥ *–û–ø–ª–∞—Ç–∞:* ${order.order.payment && order.order.payment.name}\n\n`
			const comment = `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${order.order.comment}\n\n`
			const price = `üí≤ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${order.price} —Ä—É–±.`

			let orderToTelegram = ''
			orderToTelegram += orderNumber
			orderToTelegram += client
			orderToTelegram += phone
			orderToTelegram += order.basket
			if (order.order.comment) {
				orderToTelegram += comment
			}
			if (order.order.service) {
				orderToTelegram += address
				orderToTelegram += payment
			}
			orderToTelegram += price

			let sendOrder = await bot.telegram.sendMessage(`-${restaurant.telegramGroupId}`, orderToTelegram, {
				parse_mode: 'Markdown',
				// reply_markup: {
				// 	inline_keyboard: [
				// 		[
				// 			{
				// 				text: '–ü—Ä–∏–Ω—è–ª',
				// 				callback_data: '1',
				// 			},
				// 		],
				// 	],
				// },
			})

			if (!!sendOrder.message_id) {
				res.status(200).json({
					orderNumberTime,
					price: order.price,
					service: order.order.service,
					address: order.order.address,
					time: moment().add(10, 'minutes').format('HH:mm'),
				})
			} else {
				helpers.clientErrorHandler(res, 400, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')
			}
		}
	} catch (error) {
		console.log({error})
		helpers.errorHandler(res, error)
	}
}
